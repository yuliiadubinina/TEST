/*! normalize-scss | MIT/GPLv2 License | bit.ly/normalize-scss */
html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0;font-family:'Segoe UI',Tahoma,Geneva,Verdana,sans-serif}article,aside,details,figcaption,figure,footer,header,main,menu,nav,section,template{display:block}h1{font-size:2em;margin:.67em 0}figure{margin:1em 40px}hr{-webkit-box-sizing:content-box;box-sizing:content-box;height:0;overflow:visible}code,kbd,pre,samp{font-family:monospace,monospace;font-size:1em}a{background-color:transparent;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}dfn{font-style:italic}mark{background-color:#ff0;color:#000}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}audio,canvas,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}button,input,optgroup,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}[type=reset],[type=submit],button,html [type=button]{-webkit-appearance:button}[type=button]::-moz-focus-inner,[type=reset]::-moz-focus-inner,[type=submit]::-moz-focus-inner,button::-moz-focus-inner{border-style:none;padding:0}[type=button]:-moz-focusring,[type=reset]:-moz-focusring,[type=submit]:-moz-focusring,button:-moz-focusring{outline:1px dotted ButtonText}[type=checkbox],[type=radio]{-webkit-box-sizing:border-box;box-sizing:border-box;padding:0}[type=number]::-webkit-inner-spin-button,[type=number]::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}[type=search]::-webkit-search-cancel-button,[type=search]::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}fieldset{padding:.35em .75em .625em}legend{display:table;max-width:100%;padding:0;color:inherit;white-space:normal}progress{display:inline-block;vertical-align:baseline}textarea{overflow:auto}summary{display:list-item}.btn-red:hover:before,[hidden]{display:none}*,legend{-webkit-box-sizing:border-box;box-sizing:border-box}.container,.wrap-btn{display:-webkit-box;display:-ms-flexbox;display:flex}.container{-ms-flex-pack:distribute;justify-content:space-around;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-top:20px}.wrap-btn{background:#000;width:300px;height:300px;-webkit-box-shadow:5px 5px 10px 2px rgba(0,0,0,.7);box-shadow:5px 5px 10px 2px rgba(0,0,0,.7);margin:10px}.buttons{margin:auto;text-align:center}.btn-red{margin:5px;color:#fff;border:1px solid #e2d300;width:115px;border-radius:25px;background:0 0;background-image:-webkit-gradient(linear,left top,left bottom,from(red),to(#000));background-image:linear-gradient(red,#000);-webkit-box-shadow:inset 0 0 1px 1px #700000,0 -1px 0 .1px #ffec80,0 1px 0 .1px #9c914e;box-shadow:inset 0 0 1px 1px #700000,0 -1px 0 .1px #ffec80,0 1px 0 .1px #9c914e;text-transform:uppercase;font-size:14px;padding:10px 7px;outline:0;cursor:pointer;position:relative}.btn-red:before{content:'';color:transparent;width:95px;height:10px;top:0;left:8px;background-image:-webkit-gradient(linear,left top,left bottom,from(rgba(255,255,255,.6)),to(rgba(255,255,255,.1)));background-image:linear-gradient(rgba(255,255,255,.6),rgba(255,255,255,.1));border-radius:120px/25px;position:absolute}.btn-red:hover{background:#570000;background-image:none;color:#000;-webkit-box-shadow:inset 0 -1px 2px #000,0 -1px 0 .1px #ffec80,0 1px 0 .1px #9c914e;box-shadow:inset 0 -1px 2px #000,0 -1px 0 .1px #ffec80,0 1px 0 .1px #9c914e;font-weight:700}.wrap-circle{background:rgba(225,225,225,.5);width:300px;height:300px;display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-shadow:5px 5px 10px 2px rgba(0,0,0,.7);box-shadow:5px 5px 10px 2px rgba(0,0,0,.7);-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:10px}.circle,.circle-border{border-radius:50%;position:relative}.circle-border{display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;background:-webkit-gradient(linear,left top,left bottom,from(#f0f0f0),color-stop(rgba(43,43,43,.5)),to(#7a7a7a));background:linear-gradient(#f0f0f0,rgba(43,43,43,.5),#7a7a7a);cursor:pointer;margin:auto;width:190px;height:190px;z-index:2}.circle-border:after,.circle-border:before{content:"";position:absolute;border-radius:inherit}.circle-border:after{background:-webkit-gradient(linear,left top,left bottom,from(rgba(45,45,45,.5)),to(#fff));background:linear-gradient(rgba(45,45,45,.5),#fff);padding:77px;z-index:1}.circle-border:before{padding:93px;background:-webkit-gradient(linear,left top,left bottom,from(#f0f0f0),color-stop(#2b2b2b),to(#f0f0f0));background:linear-gradient(#f0f0f0,#2b2b2b,#f0f0f0);border:0;z-index:-1}.circle{width:150px;height:150px;background:#fff;background-image:linear-gradient(160deg,#ff2600,#ec5e00,rgba(255,255,255,0) 85%);-webkit-box-shadow:inset 0 0 0 3px rgba(119,49,22,.842);box-shadow:inset 0 0 0 3px rgba(119,49,22,.842);z-index:3}.circle:before{content:"";width:5px;height:5px;left:45px;top:45px;position:absolute;background:rgba(255,255,255,.9);-webkit-box-shadow:0 0 40px 25px #fff;box-shadow:0 0 40px 25px #fff;border-radius:50%;z-index:500}.img{position:absolute;width:70%;height:70%;-webkit-transform:translate(22%,22%);transform:translate(22%,22%);z-index:3}.dropdown{background:rgba(225,225,225,.5);width:300px;height:300px;padding-top:30px;text-align:center;-webkit-box-shadow:5px 5px 10px 2px rgba(0,0,0,.7);box-shadow:5px 5px 10px 2px rgba(0,0,0,.7);margin:10px}.btn,.dropdown-menu{border-radius:2px;outline:0;width:200px;position:relative}.btn{background:#42accf;padding:12px 20px;color:#fff;cursor:pointer;border:1px solid #42accf;text-align:left}.btn:hover{background:#fff;color:#42accf}.btn:hover:before{border-right:1px solid #42accf;border-bottom:1px solid #42accf}.btn:before,.dropdown-menu::after{content:"";-webkit-transform:rotate(225deg);transform:rotate(225deg);right:20px;position:absolute}.btn:before{border-right:1px solid #fff;border-bottom:1px solid #fff;width:8px;height:8px;top:20px}.dropdown-menu{border:0;margin:10px auto;-ms-flex-wrap:wrap;flex-wrap:wrap;-webkit-box-align:center;-ms-flex-align:center;align-items:center;border:1px solid rgba(156,156,156,.5);background:#fff;text-align:center}.dropdown-menu::after{width:5px;height:5px;background:#fff;border-right:1px solid rgba(156,156,156,.5);border-bottom:1px solid rgba(156,156,156,.5);top:-4px}.dropdown-menu__item{display:block;width:100%;text-decoration:none;padding:10px 20px;text-align:left;color:rgba(156,156,156,.5)}.dropdown-menu__item:not(:last-child){border-bottom:1px solid rgba(156,156,156,.5)}.dropdown-menu__item:hover{color:gray}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
